{"ast":null,"code":"import _classCallCheck from \"D:\\\\react_training\\\\ReactJsOld\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\react_training\\\\ReactJsOld\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\react_training\\\\ReactJsOld\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\react_training\\\\ReactJsOld\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\react_training\\\\ReactJsOld\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\react_training\\\\ReactJsOld\\\\src\\\\views\\\\containers\\\\Employee\\\\EditForm.js\";\nimport React, { Component } from 'react';\nimport { Container, Card } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { empOperations, empSelectors } from \"./state\";\nimport moment from \"moment\";\nimport FormTemplate from '../../components/FormTemplate';\nimport TableTemplate from '../../components/TableTemplate';\nimport { getListEmployee, addEmployee } from './state/operations';\n\nvar EditForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EditForm, _Component);\n\n  function EditForm(props) {\n    var _this;\n\n    _classCallCheck(this, EditForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditForm).call(this, props));\n\n    _this.handleSubmit = function (values) {\n      var newValue = values.EmployeeForm;\n      newValue.technologies = JSON.stringify(newValue.technologies);\n      newValue.regular = newValue.regular ? 1 : 0; //newValue.birthdate = new Date(newValue.birthdate.replace(/-/g,\"/\"));\n\n      newValue.birthdate = moment(newValue.birthdate).format(\"YYYY-MM-DD\");\n\n      _this.props.updateEmployee(newValue, _this.state.employeeForm.EmployeeForm.id);\n\n      _this.props.history.push(\"/Employee\"); //let newValue = values.EmployeeForm.testvalue; //get testvalue data from form's TestForm model\n      //this.props.updateApiValue(newValue);\n\n    };\n\n    _this.state = {\n      employeeForm: null\n    };\n    return _this;\n  } //componentDidMount lifecycle is called after the component has mounted\n\n\n  _createClass(EditForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var id = this.props.match.params.id; //this will get the id from the URL parameter\n      //This is your local state. initialFormValue will hold your form's initial value\n      //All local states of your smart components are defined here\n\n      this.props.getEmployeeById(id).then(function (response) {\n        _this2.setState({\n          employeeForm: {\n            EmployeeForm: {\n              id: response.id,\n              name: response.name,\n              position: response.position,\n              salary: response.salary,\n              birthdate: response.birthdate,\n              gender: response.gender,\n              regular: response.regular,\n              technologies: JSON.parse(response.technologies)\n            }\n          }\n        }, function () {\n          console.log(_this2.state);\n        });\n      });\n    } //custom function to handle form submission\n    //Pass values from formTemplate to handleSubmit and call method\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"Edit Form\"), React.createElement(FormTemplate, Object.assign({}, this.props, {\n        validate: empSelectors.validateForm //Validation for form\n        ,\n        handleSubmit: this.handleSubmit //Submit action handler\n        ,\n        initialValues: this.state.employeeForm,\n        editMode: true //add this to indicate edit mode and check initial values\n        ,\n        formButtons: [{\n          variant: \"success\",\n          label: \"Save\",\n          submit: true // buttons with [submit: true] will trigger the handleSubmit as defined in FormTemplate.js\n\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return EditForm;\n}(Component); // mapStateToProps method is used to access redux store values\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    reducerVariable: state.emp.reducerVariable,\n    //Value from the module's reducer.js file\n    formInputs: state.emp.employeeForm,\n    radioInput: state.emp.radioInput,\n    checkboxInput: state.emp.checkboxInput //Form definition in the module's reducer.js file\n\n  };\n}; // mapDispatchToProps method is used to call action creators\n// bindAction creators is used to bind the methods with store dispatch\n\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    //define methods here\n    updateApiValue: empOperations.updateApiValue,\n    getApiValue: empOperations.getApiValue,\n    getListEmployee: empOperations.getListEmployee,\n    addEmployee: empOperations.addEmployee,\n    deleteEmployee: empOperations.deleteEmployee,\n    getEmployeeById: empOperations.getEmployeeById,\n    updateEmployee: empOperations.updateEmployee\n  }, dispatch);\n}; //connect method is used to connect the container to the redux store\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditForm);","map":{"version":3,"sources":["D:\\react_training\\ReactJsOld\\src\\views\\containers\\Employee\\EditForm.js"],"names":["React","Component","Container","Card","connect","bindActionCreators","empOperations","empSelectors","moment","FormTemplate","TableTemplate","getListEmployee","addEmployee","EditForm","props","handleSubmit","values","newValue","EmployeeForm","technologies","JSON","stringify","regular","birthdate","format","updateEmployee","state","employeeForm","id","history","push","match","params","getEmployeeById","then","response","setState","name","position","salary","gender","parse","console","log","validateForm","variant","label","submit","mapStateToProps","reducerVariable","emp","formInputs","radioInput","checkboxInput","mapDispatchToProps","dispatch","updateApiValue","getApiValue","deleteEmployee"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Container, Card } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux'\r\nimport { empOperations, empSelectors } from \"./state\";\r\nimport moment from \"moment\";\r\n\r\nimport FormTemplate from '../../components/FormTemplate';\r\nimport TableTemplate from '../../components/TableTemplate';\r\nimport { getListEmployee, addEmployee } from './state/operations';\r\n\r\nclass EditForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            employeeForm: null\r\n        }\r\n    }\r\n\r\n    //componentDidMount lifecycle is called after the component has mounted\r\n    componentDidMount() {\r\n        let id = this.props.match.params.id; //this will get the id from the URL parameter\r\n        //This is your local state. initialFormValue will hold your form's initial value\r\n        //All local states of your smart components are defined here\r\n        this.props.getEmployeeById(id)\r\n            .then((response) => {\r\n                this.setState({\r\n                    employeeForm: {\r\n                        EmployeeForm: {\r\n                            id: response.id,\r\n                            name: response.name,\r\n                            position: response.position,\r\n                            salary: response.salary,\r\n                            birthdate: response.birthdate,\r\n                            gender: response.gender,\r\n                            regular: response.regular,\r\n                            technologies: JSON.parse(response.technologies)\r\n                        }\r\n                    }\r\n                }, () => { console.log(this.state) });\r\n\r\n\r\n            });\r\n    }\r\n\r\n    //custom function to handle form submission\r\n    //Pass values from formTemplate to handleSubmit and call method\r\n    handleSubmit = (values) => {\r\n        let newValue = values.EmployeeForm;\r\n        newValue.technologies = JSON.stringify(newValue.technologies);\r\n        newValue.regular = newValue.regular ? 1 : 0;\r\n        //newValue.birthdate = new Date(newValue.birthdate.replace(/-/g,\"/\"));\r\n        newValue.birthdate = moment(newValue.birthdate).format(\"YYYY-MM-DD\");\r\n        this.props.updateEmployee(newValue, this.state.employeeForm.EmployeeForm.id);\r\n        this.props.history.push(\"/Employee\");\r\n        //let newValue = values.EmployeeForm.testvalue; //get testvalue data from form's TestForm model\r\n        //this.props.updateApiValue(newValue);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Card>\r\n                    <h1>Edit Form</h1>\r\n                    <FormTemplate\r\n                        {...this.props}\r\n                        validate={empSelectors.validateForm}  //Validation for form\r\n                        handleSubmit={this.handleSubmit}        //Submit action handler\r\n                        initialValues={this.state.employeeForm}\r\n                        editMode={true} //add this to indicate edit mode and check initial values\r\n                        formButtons={[\r\n                            { variant: \"success\", label: \"Save\", submit: true }\r\n                            // buttons with [submit: true] will trigger the handleSubmit as defined in FormTemplate.js\r\n                        ]}\r\n                    />\r\n                </Card>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n// mapStateToProps method is used to access redux store values\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        reducerVariable: state.emp.reducerVariable, //Value from the module's reducer.js file\r\n        formInputs: state.emp.employeeForm,\r\n        radioInput: state.emp.radioInput,\r\n        checkboxInput: state.emp.checkboxInput,\r\n        //Form definition in the module's reducer.js file\r\n    }\r\n};\r\n\r\n// mapDispatchToProps method is used to call action creators\r\n// bindAction creators is used to bind the methods with store dispatch\r\nconst mapDispatchToProps = (dispatch) => bindActionCreators(\r\n    {\r\n        //define methods here\r\n        updateApiValue: empOperations.updateApiValue,\r\n        getApiValue: empOperations.getApiValue,\r\n        getListEmployee: empOperations.getListEmployee,\r\n        addEmployee: empOperations.addEmployee,\r\n        deleteEmployee: empOperations.deleteEmployee,\r\n        getEmployeeById: empOperations.getEmployeeById,\r\n        updateEmployee: empOperations.updateEmployee\r\n    },\r\n    dispatch\r\n);\r\n\r\n//connect method is used to connect the container to the redux store\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditForm);"]},"metadata":{},"sourceType":"module"}