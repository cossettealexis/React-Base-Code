{"ast":null,"code":"import _slicedToArray from \"D:\\\\react_training\\\\ReactJsOld\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\react_training\\\\ReactJsOld\\\\src\\\\views\\\\components\\\\SimpleFormik.js\";\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport React, { useState } from 'react';\n\nvar SimpleFormik = function SimpleFormik(_ref) {\n  var addCard = _ref.addCard;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      title = _useState2[0],\n      setTitle = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      text = _useState4[0],\n      setText = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      titleError = _useState6[0],\n      setTitleError = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      textError = _useState8[0],\n      setTextError = _useState8[1];\n\n  var initialValues = {\n    title: '',\n    text: ''\n  };\n\n  var validateForm = function validateForm(values) {\n    var errors = {};\n\n    if (!values.title) {\n      errors.title = 'Title is required';\n    }\n\n    if (!values.text) {\n      errors.text = 'Description is required';\n    }\n\n    return errors;\n  };\n\n  var handleSubmit = function handleSubmit(values) {\n    values.preventDefault();\n    var isValid = true; //validate fields\n\n    if (title.trim() === '') {\n      setTitleError('Title is required');\n      isValid = false;\n    } else {\n      setTitleError('');\n    }\n\n    if (text.trim() === '') {\n      setTextError('Text is required');\n      isValid = false;\n    } else {\n      setTextError('');\n    }\n\n    if (isValid) {\n      addCard({\n        title: title,\n        text: text\n      });\n      setTitle(\"\");\n      setText(\"\");\n    } // const errors = validateForm(values);\n    // if (Object.keys(errors).length > 0) {\n    //   setSubmitting(false);\n    // } else {\n    //   if (values.title.trim() !== '' && values.text.trim() !== '') {\n    //     await addCard(values);\n    //     setSubmitting(false);\n    //   }\n    // }\n\n  };\n\n  return React.createElement(Formik, {\n    initialValues: initialValues,\n    validate: validateForm,\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, function (_ref2) {\n    var isSubmitting = _ref2.isSubmitting;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"Simple Formik\"), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Title:\", React.createElement(Field, {\n      type: \"text\",\n      name: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"title\",\n      component: \"div\",\n      className: \"error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Description:\", React.createElement(Field, {\n      type: \"text\",\n      name: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"text\",\n      component: \"div\",\n      className: \"error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      disabled: isSubmitting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, isSubmitting ? 'Submitting...' : 'Submit')), React.createElement(\"style\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"\\n            .error {\\n              color: red;\\n            }\\n          \"));\n  });\n};\n\nexport default SimpleFormik;","map":{"version":3,"sources":["D:\\react_training\\ReactJsOld\\src\\views\\components\\SimpleFormik.js"],"names":["Formik","Field","ErrorMessage","React","useState","SimpleFormik","addCard","title","setTitle","text","setText","titleError","setTitleError","textError","setTextError","initialValues","validateForm","values","errors","handleSubmit","preventDefault","isValid","trim","isSubmitting"],"mappings":"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","sourcesContent":["import { Formik, Field, ErrorMessage } from 'formik';\r\nimport React, { useState } from 'react';\r\n\r\nconst SimpleFormik = ({ addCard }) => {\r\n    const [title, setTitle] = useState(\"\");\r\n    const [text, setText] = useState(\"\");\r\n    const [titleError, setTitleError] = useState('');\r\n    const [textError, setTextError] = useState('');\r\n\r\n    const initialValues = {\r\n        title: '',\r\n        text: '',\r\n    };\r\n\r\n  const validateForm = (values) => {\r\n    const errors = {};\r\n\r\n    if (!values.title) {\r\n      errors.title = 'Title is required';\r\n    }\r\n\r\n    if (!values.text) {\r\n      errors.text = 'Description is required';\r\n    }\r\n\r\n    return errors;\r\n  };\r\n\r\n  const handleSubmit = (values) => {\r\n    values.preventDefault()\r\n    let isValid = true;\r\n\r\n    //validate fields\r\n    if (title.trim() === '') {\r\n        setTitleError('Title is required');\r\n        isValid = false;\r\n    } else {\r\n        setTitleError('');\r\n    }\r\n\r\n    if (text.trim() === '') {\r\n        setTextError('Text is required');\r\n        isValid = false;\r\n    } else {\r\n        setTextError('');\r\n    }\r\n\r\n    if (isValid) {\r\n        addCard({title, text})\r\n        setTitle(\"\")\r\n        setText(\"\")\r\n    }  \r\n    // const errors = validateForm(values);\r\n\r\n    // if (Object.keys(errors).length > 0) {\r\n    //   setSubmitting(false);\r\n    // } else {\r\n    //   if (values.title.trim() !== '' && values.text.trim() !== '') {\r\n    //     await addCard(values);\r\n    //     setSubmitting(false);\r\n    //   }\r\n    // }\r\n  };\r\n\r\n  return (\r\n    <Formik initialValues={initialValues} validate={validateForm} onSubmit={handleSubmit}>\r\n      {({ isSubmitting }) => (\r\n        <div>\r\n          <h1>Simple Formik</h1>\r\n          <form>\r\n            <label>\r\n              Title:\r\n              <Field type=\"text\" name=\"title\" />\r\n              <ErrorMessage name=\"title\" component=\"div\" className=\"error\" />\r\n            </label>\r\n\r\n            <br />\r\n\r\n            <label>\r\n              Description:\r\n              <Field type=\"text\" name=\"text\" />\r\n              <ErrorMessage name=\"text\" component=\"div\" className=\"error\" />\r\n            </label>\r\n\r\n            <br />\r\n\r\n            <button type=\"submit\" disabled={isSubmitting}>\r\n              {isSubmitting ? 'Submitting...' : 'Submit'}\r\n            </button>\r\n          </form>\r\n\r\n          <style>{`\r\n            .error {\r\n              color: red;\r\n            }\r\n          `}</style>\r\n        </div>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default SimpleFormik;"]},"metadata":{},"sourceType":"module"}