{"ast":null,"code":"import _classCallCheck from \"D:\\\\react_training\\\\ReactJsOld\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\react_training\\\\ReactJsOld\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport axios from 'axios';\nimport { REST_SERVICE_URL_ROOT, CLIENT_ID, CLIENT_SECRET } from '../config/settings';\nimport configureStore from '../app.modules';\n\nvar ApiService =\n/*#__PURE__*/\nfunction () {\n  function ApiService() {\n    _classCallCheck(this, ApiService);\n\n    this.handleError = function (error) {\n      var status = error.response ? error.response.status : null;\n\n      switch (status) {\n        case 401:\n          console.error(error);\n          break;\n\n        case 404:\n          console.error(error);\n          break;\n\n        default:\n          console.error(error);\n          break;\n      }\n\n      return Promise.reject(error);\n    };\n\n    this.redirectTo = function (document, path) {\n      document.location = path;\n    };\n\n    axios.defaults.baseURL = REST_SERVICE_URL_ROOT;\n    var service = axios.create(); //Request Interceptor\n\n    service.interceptors.request.use(function (config) {\n      try {\n        var token = configureStore().getState().auth.credentials.authToken; //Change depending on your authorization token variable\n\n        config.headers.common['Authorization'] = 'Bearer ' + token;\n        config.headers.common['Content-Type'] = 'application/json';\n      } catch (_unused) {\n        console.log(\"Unauthorized\");\n      } // Do something before request is sent\n\n\n      return config;\n    }, function (error) {\n      // Do something with request error\n      this.handleError(error);\n      return Promise.reject(error);\n    }); //Response Interceptor\n\n    service.interceptors.response.use(this.handleSuccess, this.handleError);\n    this.service = service;\n  }\n\n  _createClass(ApiService, [{\n    key: \"handleSuccess\",\n    value: function handleSuccess(response) {\n      return response;\n    } //Update actions for error handling\n\n  }, {\n    key: \"get\",\n    value: function get(path) {\n      return this.service.get(path);\n    }\n  }, {\n    key: \"token\",\n    value: function token(payload) {\n      var params = new URLSearchParams();\n      params.append('username', payload.username);\n      params.append('password', payload.password);\n      params.append('grant_type', \"password\");\n      return this.service.request({\n        method: 'POST',\n        url: REST_SERVICE_URL_ROOT + \"/oauth/token\",\n        responseType: 'json',\n        params: params,\n        headers: {\n          \"Authorization\": \"Basic \" + btoa(CLIENT_ID + \":\" + CLIENT_SECRET),\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      }).then(function (response) {\n        return response;\n      });\n    }\n  }, {\n    key: \"patch\",\n    value: function patch(path, payload) {\n      return this.service.request({\n        method: 'PATCH',\n        url: path,\n        responseType: 'json',\n        data: payload\n      }).then(function (response) {\n        return response;\n      });\n    }\n  }, {\n    key: \"post\",\n    value: function post(path, payload) {\n      return this.service.request({\n        method: 'POST',\n        url: path,\n        responseType: 'json',\n        data: payload\n      }).then(function (response) {\n        return response;\n      });\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(path, payload) {\n      return this.service.request({\n        method: 'DELETE',\n        url: path,\n        responseType: 'json',\n        data: payload\n      }).then(function (response) {\n        return response;\n      });\n    }\n  }]);\n\n  return ApiService;\n}();\n\nexport default new ApiService();","map":{"version":3,"sources":["D:\\react_training\\ReactJsOld\\src\\utils\\apiService.js"],"names":["axios","REST_SERVICE_URL_ROOT","CLIENT_ID","CLIENT_SECRET","configureStore","ApiService","handleError","error","status","response","console","Promise","reject","redirectTo","document","path","location","defaults","baseURL","service","create","interceptors","request","use","config","token","getState","auth","credentials","authToken","headers","common","log","handleSuccess","get","payload","params","URLSearchParams","append","username","password","method","url","responseType","btoa","then","data"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { REST_SERVICE_URL_ROOT, CLIENT_ID, CLIENT_SECRET } from '../config/settings';\r\nimport configureStore from '../app.modules';\r\n\r\nclass ApiService {\r\n  constructor() {\r\n    \r\n    axios.defaults.baseURL = REST_SERVICE_URL_ROOT;\r\n    \r\n    let service = axios.create();\r\n    \r\n    //Request Interceptor\r\n    service.interceptors.request.use(function (config) {\r\n      try{\r\n        let token = configureStore().getState().auth.credentials.authToken;\r\n        //Change depending on your authorization token variable\r\n        config.headers.common['Authorization'] = 'Bearer ' + token;\r\n        config.headers.common['Content-Type'] = 'application/json';\r\n\r\n      }catch{\r\n        console.log(\"Unauthorized\");\r\n      }\r\n      \r\n      // Do something before request is sent\r\n      return config;\r\n    }, function (error) {\r\n      // Do something with request error\r\n      this.handleError(error)\r\n      return Promise.reject(error);\r\n    });\r\n\r\n    //Response Interceptor\r\n    service.interceptors.response.use(this.handleSuccess, this.handleError);\r\n    \r\n    this.service = service;\r\n  }\r\n\r\n  handleSuccess(response) {\r\n    return response;\r\n  }\r\n\r\n  //Update actions for error handling\r\n  handleError = (error) => {\r\n    \r\n    const status = error.response ? error.response.status : null;\r\n    \r\n    switch (status) {\r\n      case 401:\r\n        console.error(error);\r\n        break;\r\n      case 404:\r\n        console.error(error);\r\n        break;\r\n      default:\r\n        console.error(error);\r\n        break;\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n\r\n  redirectTo = (document, path) => {\r\n    document.location = path;\r\n  }\r\n  \r\n  get(path) {\r\n    return this.service.get(path);\r\n  }\r\n\r\n  token(payload) {\r\n    let params = new URLSearchParams();\r\n    params.append('username', payload.username);\r\n    params.append('password', payload.password);\r\n    params.append('grant_type', \"password\");\r\n    \r\n    return this.service.request({\r\n      method: 'POST',\r\n      url: REST_SERVICE_URL_ROOT+\"/oauth/token\",\r\n      responseType: 'json',\r\n      params: params,\r\n      headers: {\r\n        \"Authorization\": \"Basic \"+btoa(CLIENT_ID + \":\" + CLIENT_SECRET),\r\n        'Content-Type': 'application/x-www-form-urlencoded'\r\n      }\r\n    }).then((response) => { return response});\r\n  }\r\n  \r\n  patch(path, payload) {\r\n    return this.service.request({\r\n      method: 'PATCH',\r\n      url: path,\r\n      responseType: 'json',\r\n      data: payload\r\n    }).then((response) => {return response});\r\n  }\r\n\r\n  post(path, payload) {\r\n    return this.service.request({\r\n      method: 'POST',\r\n      url: path,\r\n      responseType: 'json',\r\n      data: payload\r\n    }).then((response) => {return response});\r\n  }\r\n\r\n  delete(path, payload) {\r\n    return this.service.request({\r\n      method: 'DELETE',\r\n      url: path,\r\n      responseType: 'json',\r\n      data: payload\r\n    }).then((response) => {return response});\r\n  }\r\n}\r\n\r\nexport default new ApiService();"]},"metadata":{},"sourceType":"module"}