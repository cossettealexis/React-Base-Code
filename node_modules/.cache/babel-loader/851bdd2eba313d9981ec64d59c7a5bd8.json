{"ast":null,"code":"import _classCallCheck from \"D:\\\\react_training\\\\ReactJsOld\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\react_training\\\\ReactJsOld\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\react_training\\\\ReactJsOld\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\react_training\\\\ReactJsOld\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\react_training\\\\ReactJsOld\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\react_training\\\\ReactJsOld\\\\src\\\\views\\\\containers\\\\Employee\\\\Employee.js\";\nimport React, { Component } from 'react';\nimport { Container, Card } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { empOperations, empSelectors } from \"./state\";\nimport FormTemplate from '../../components/FormTemplate';\nimport TableTemplate from '../../components/TableTemplate';\nimport moment from 'moment';\n\nvar Employee =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Employee, _Component);\n\n  function Employee() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Employee);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Employee)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleSubmit = function (values) {\n      var newValue = values.EmployeeForm;\n      newValue.technologies = JSON.stringify(newValue.technologies);\n      newValue.regular = newValue.regular ? 1 : 0;\n      newValue.birthdate = moment(newValue.birthdate).format(\"YYYY-MM-DD\");\n\n      _this.props.addEmployee(newValue); //let newValue = values.EmployeeForm.testvalue; //get testvalue data from form's TestForm model\n      //this.props.updateApiValue(newValue);\n\n    };\n\n    _this.delete = function (values) {\n      _this.props.deleteEmployee(values.id);\n    };\n\n    _this.edit = function (data) {\n      _this.props.history.push(\"/EditForm\" + \"/\" + data.id);\n    };\n\n    return _this;\n  }\n\n  _createClass(Employee, [{\n    key: \"componentDidMount\",\n    //componentDidMount lifecycle is called after the component has mounted\n    value: function componentDidMount() {\n      //calls the getApiValue() method defined in mapDispatchToProps\n      this.props.getListEmployee();\n    } //custom function to handle form submission\n    //Pass values from formTemplate to handleSubmit and call method\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(TableTemplate, Object.assign({}, this.props, {\n        //pass the props to the component\n        rowButtons: [{\n          variant: \"info\",\n          label: \"Edit\",\n          onClick: this.edit\n        }, {\n          variant: \"danger\",\n          label: \"Delete\",\n          onClick: this.delete\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      })), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, this.props.reducerVariable), React.createElement(FormTemplate, Object.assign({}, this.props, {\n        validate: empSelectors.validateForm //Validation for form\n        ,\n        handleSubmit: this.handleSubmit //Submit action handler\n        ,\n        formButtons: [{\n          variant: \"success\",\n          label: \"Save\",\n          submit: true // buttons with [submit: true] will trigger the handleSubmit as defined in FormTemplate.js\n\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Employee;\n}(Component); // mapStateToProps method is used to access redux store values\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    reducerVariable: state.emp.reducerVariable,\n    //Value from the module's reducer.js file\n    formInputs: state.emp.employeeForm,\n    radioInput: state.emp.radioInput,\n    checkboxInput: state.emp.checkboxInput,\n    tableHeader: state.emp.table.tableHeader,\n    tableColumns: state.emp.table.tableColumns,\n    tableList: state.emp.list //Form definition in the module's reducer.js file\n\n  };\n}; // mapDispatchToProps method is used to call action creators\n// bindAction creators is used to bind the methods with store dispatch\n\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    //define methods here\n    updateApiValue: empOperations.updateApiValue,\n    getListEmployee: empOperations.getListEmployee,\n    addEmployee: empOperations.addEmployee,\n    deleteEmployee: empOperations.deleteEmployee\n  }, dispatch);\n}; //connect method is used to connect the container to the redux store\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Employee);","map":{"version":3,"sources":["D:\\react_training\\ReactJsOld\\src\\views\\containers\\Employee\\Employee.js"],"names":["React","Component","Container","Card","connect","bindActionCreators","empOperations","empSelectors","FormTemplate","TableTemplate","moment","Employee","handleSubmit","values","newValue","EmployeeForm","technologies","JSON","stringify","regular","birthdate","format","props","addEmployee","delete","deleteEmployee","id","edit","data","history","push","getListEmployee","variant","label","onClick","reducerVariable","validateForm","submit","mapStateToProps","state","emp","formInputs","employeeForm","radioInput","checkboxInput","tableHeader","table","tableColumns","tableList","list","mapDispatchToProps","dispatch","updateApiValue"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport { Container, Card } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux'\r\nimport { empOperations, empSelectors } from \"./state\";\r\n\r\nimport FormTemplate from '../../components/FormTemplate';\r\nimport TableTemplate from '../../components/TableTemplate';\r\nimport  moment from 'moment';\r\n\r\nclass Employee extends Component {\r\n    //componentDidMount lifecycle is called after the component has mounted\r\n    componentDidMount(){\r\n        //calls the getApiValue() method defined in mapDispatchToProps\r\n        this.props.getListEmployee()\r\n    }\r\n\r\n    //custom function to handle form submission\r\n    //Pass values from formTemplate to handleSubmit and call method\r\n    handleSubmit = (values) => {\r\n        let newValue = values.EmployeeForm;\r\n        newValue.technologies = JSON.stringify(newValue.technologies);\r\n        newValue.regular = newValue.regular ? 1 : 0;\r\n        newValue.birthdate = moment(newValue.birthdate).format(\"YYYY-MM-DD\")\r\n        this.props.addEmployee(newValue);\r\n        //let newValue = values.EmployeeForm.testvalue; //get testvalue data from form's TestForm model\r\n        //this.props.updateApiValue(newValue);\r\n    }\r\n    \r\n    delete = (values) => {\r\n        this.props.deleteEmployee(values.id);\r\n    }\r\n\r\n    edit = (data) => {\r\n        this.props.history.push(\"/EditForm\" + \"/\" + data.id)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Container>\r\n\r\n                    <Card>\r\n                        <TableTemplate \r\n                            {...this.props} //pass the props to the component\r\n                            rowButtons={[\r\n                                {variant: \"info\", label: \"Edit\", onClick: this.edit},\r\n                                {variant: \"danger\", label: \"Delete\", onClick: this.delete},\r\n                            ]}\r\n                        />\r\n                        <h1>{this.props.reducerVariable}</h1>\r\n                        <FormTemplate\r\n                            {...this.props}\r\n                            validate={empSelectors.validateForm}  //Validation for form\r\n                            handleSubmit={this.handleSubmit}        //Submit action handler\r\n                            formButtons={[\r\n                                { variant: \"success\", label: \"Save\", submit: true }\r\n                                // buttons with [submit: true] will trigger the handleSubmit as defined in FormTemplate.js\r\n                            ]}\r\n                        />\r\n                 </Card>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n// mapStateToProps method is used to access redux store values\r\nconst mapStateToProps = (state) =>{\r\n    return{\r\n        reducerVariable: state.emp.reducerVariable, //Value from the module's reducer.js file\r\n        formInputs: state.emp.employeeForm,\r\n        radioInput:state.emp.radioInput,\r\n        checkboxInput:state.emp.checkboxInput,\r\n        tableHeader: state.emp.table.tableHeader,\r\n        tableColumns: state.emp.table.tableColumns,\r\n        tableList: state.emp.list,\r\n         //Form definition in the module's reducer.js file\r\n    }    \r\n};\r\n\r\n// mapDispatchToProps method is used to call action creators\r\n// bindAction creators is used to bind the methods with store dispatch\r\nconst mapDispatchToProps = (dispatch) => bindActionCreators(\r\n    {\r\n        //define methods here\r\n        updateApiValue: empOperations.updateApiValue,\r\n        getListEmployee: empOperations.getListEmployee,\r\n        addEmployee: empOperations.addEmployee,\r\n        deleteEmployee: empOperations.deleteEmployee\r\n    }, \r\n        dispatch \r\n    );\r\n\r\n//connect method is used to connect the container to the redux store\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Employee);"]},"metadata":{},"sourceType":"module"}