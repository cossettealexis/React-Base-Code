{"ast":null,"code":"var _jsxFileName = \"D:\\\\react_training\\\\ReactJsOld\\\\src\\\\views\\\\components\\\\FormTemplate.js\";\nimport React from 'react';\nimport { FormLabel, FormGroup, Button, ButtonToolbar, FormCheck, Tabs, Tab, Card } from 'react-bootstrap';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport moment from 'moment';\nimport { Formik, Form, Field, FieldArray } from 'formik';\nimport { isNullOrUndefined } from '../../../node_modules/util';\nimport { DATE_FORMAT } from '../../utils/constants';\n\nvar FormTemplate = function FormTemplate(props) {\n  //Initial values\n  var initialValues = props.initialValues;\n\n  if (isNullOrUndefined(props.initialValues)) {\n    initialValues = {}; //Initial value if tabbed or single\n\n    if (isNullOrUndefined(props.initialValues)) {\n      if (props.tabbed || props.nested) {\n        props.multiFormInputs.map(function (tab) {\n          var modelValues = {};\n          tab.form.map(function (input) {\n            return input.type === \"datepicker\" ? modelValues[input.name] = moment() : modelValues[input.name] = input.default;\n          });\n          initialValues[tab.model] = modelValues;\n          return initialValues[tab.model];\n        });\n      } else {\n        var modelValues = {};\n        props.formInputs.form.map(function (input) {\n          return input.type === \"datepicker\" ? modelValues[input.name] = moment() : modelValues[input.name] = input.default;\n        });\n        initialValues[props.formInputs.model] = modelValues;\n      }\n    }\n  }\n\n  var defaultClass = \"form-input\";\n\n  function RenderInput(model, input, fieldValue, setFieldValue, errors, touched) {\n    var modelField = \"\".concat(model, \".\").concat(input.name);\n    var modelTouch = touched[model];\n    var isTouched = undefined !== touched[model] && modelTouch[input.name];\n    var isError = undefined !== errors[modelField];\n    var displayError = isTouched && isError;\n\n    switch (input.type) {\n      //renders file upload\n      case \"file\":\n        {\n          return React.createElement(FormGroup, {\n            key: input.name,\n            className: defaultClass,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 53\n            },\n            __self: this\n          }, React.createElement(FormLabel, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 54\n            },\n            __self: this\n          }, input.label), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55\n            },\n            __self: this\n          }), React.createElement(\"input\", {\n            name: modelField,\n            type: \"file\",\n            onChange: function onChange(event) {\n              setFieldValue(modelField, event.target.files[0]);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56\n            },\n            __self: this\n          }));\n        }\n      //renders radio button group field\n\n      case \"radio\":\n        {\n          return React.createElement(FormGroup, {\n            key: input.name,\n            className: defaultClass,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66\n            },\n            __self: this\n          }, React.createElement(FormLabel, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67\n            },\n            __self: this\n          }, input.label), input.inline && React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68\n            },\n            __self: this\n          }), CustomError(errors[modelField], displayError), props.radioInput.map(function (radio, index) {\n            if (radio.name === input.name) {\n              return React.createElement(FormCheck, {\n                id: input.name + index,\n                type: \"radio\",\n                inline: input.inline,\n                key: index,\n                value: radio.value,\n                name: modelField,\n                onChange: function onChange(event) {\n                  return setFieldValue(modelField, event.target.value);\n                },\n                checked: fieldValue.toString() === radio.value.toString(),\n                label: radio.label,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 74\n                },\n                __self: this\n              });\n            }\n\n            return null;\n          }));\n        }\n      //renders single checkbox field\n\n      case \"checkbox\":\n        {\n          return React.createElement(FormGroup, {\n            key: input.name,\n            className: defaultClass,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98\n            },\n            __self: this\n          }, React.createElement(FormLabel, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 99\n            },\n            __self: this\n          }, input.label), CustomError(errors[modelField], displayError), React.createElement(FormCheck, {\n            id: input.name + input.value,\n            type: \"checkbox\",\n            value: input.value,\n            name: modelField,\n            onChange: function onChange() {\n              return setFieldValue(modelField, !fieldValue);\n            },\n            checked: fieldValue,\n            label: input.label,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102\n            },\n            __self: this\n          }));\n        }\n      //renders multiple checkbox field\n\n      case \"multi-checkbox\":\n        {\n          return React.createElement(FormGroup, {\n            key: input.name,\n            className: defaultClass,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 118\n            },\n            __self: this\n          }, React.createElement(FormLabel, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 119\n            },\n            __self: this\n          }, input.label), CustomError(errors[modelField], displayError), React.createElement(FieldArray, {\n            name: modelField,\n            render: function render(arrayHelpers) {\n              return React.createElement(\"div\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 125\n                },\n                __self: this\n              }, props.checkboxInput.map(function (checkbox, index) {\n                if (input.name === checkbox.name) {\n                  return React.createElement(FormCheck, {\n                    id: input.name + index,\n                    type: \"checkbox\",\n                    key: index,\n                    name: modelField,\n                    value: checkbox.value,\n                    inline: input.inline,\n                    checked: 0 <= fieldValue.indexOf(checkbox.value),\n                    onChange: function onChange(event) {\n                      if (event.target.checked) {\n                        arrayHelpers.push(checkbox.value);\n                      } else {\n                        var checkIndex = fieldValue.indexOf(checkbox.value);\n                        arrayHelpers.remove(checkIndex);\n                      }\n                    },\n                    label: checkbox.label,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 129\n                    },\n                    __self: this\n                  });\n                }\n\n                return null;\n              }));\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 122\n            },\n            __self: this\n          }));\n        }\n      //renders datepicker field\n\n      case \"datepicker\":\n        {\n          var dateValue = moment(fieldValue, input.format).isValid() ? moment(fieldValue, input.format) : null;\n          return React.createElement(FormGroup, {\n            key: input.name,\n            className: defaultClass,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 164\n            },\n            __self: this\n          }, React.createElement(FormLabel, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 165\n            },\n            __self: this\n          }, input.label), CustomError(errors[modelField], displayError), React.createElement(DatePicker, {\n            className: displayError ? \"form-error\" : \"\",\n            name: modelField,\n            selected: dateValue,\n            onChangeRaw: function onChangeRaw(event) {\n              return event.preventDefault();\n            },\n            onChange: function onChange(newValue) {\n              return setFieldValue(modelField, moment(newValue).format(DATE_FORMAT));\n            },\n            placeholderText: input.placeholder,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 168\n            },\n            __self: this\n          }));\n        }\n      // renders select field\n\n      case \"select\":\n        {\n          return React.createElement(FormGroup, {\n            key: input.name,\n            className: defaultClass,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 183\n            },\n            __self: this\n          }, React.createElement(FormLabel, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 184\n            },\n            __self: this\n          }, input.label), CustomError(errors[modelField], displayError), React.createElement(Field, {\n            className: displayError ? \"form-control form-error\" : \"form-control\",\n            component: \"select\",\n            name: modelField,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 187\n            },\n            __self: this\n          }, React.createElement(\"option\", {\n            disabled: true,\n            value: \"\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 192\n            },\n            __self: this\n          }, input.placeholder), props.selectInput && props.selectInput.filter(function (option) {\n            return option.name === input.name;\n          }).map(function (item, i) {\n            return React.createElement(\"option\", {\n              key: i,\n              value: item.value,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 195\n              },\n              __self: this\n            }, \" \", item.label, \" \");\n          })));\n        }\n      //renders text, textarea, email, password, numbers, default input\n\n      default:\n        {\n          return React.createElement(FormGroup, {\n            key: modelField,\n            className: defaultClass,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 206\n            },\n            __self: this\n          }, React.createElement(FormLabel, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 207\n            },\n            __self: this\n          }, input.label), CustomError(errors[modelField], displayError), React.createElement(Field, {\n            className: displayError ? \"form-control form-error\" : \"form-control\",\n            placeholder: input.placeholder,\n            component: input.component,\n            type: input.type,\n            name: modelField,\n            maxLength: input.maxLength,\n            minLength: input.minLength,\n            min: input.min,\n            max: input.max,\n            onChange: function onChange(event) {\n              return setFieldValue(modelField, event.target.value);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 210\n            },\n            __self: this\n          }));\n        }\n    }\n  } //Error messages\n\n\n  var CustomError = function CustomError(error, displayError) {\n    return displayError ? React.createElement(\"p\", {\n      className: \"formik-error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, error) : null;\n  }; //Renders form buttons\n\n\n  var FormButtons = props.formButtons && props.formButtons.map(function (button, i) {\n    return React.createElement(Button, {\n      type: button.submit ? \"submit\" : \"button\",\n      key: i,\n      className: button.className,\n      variant: button.variant,\n      size: button.size,\n      onClick: button.onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, button.label);\n  }); //Maps form inputs\n\n  var FormInputs = function FormInputs(values, setFieldValue, errors, touched) {\n    return props.formInputs.form && props.formInputs.form.map(function (input) {\n      return RenderInput(props.formInputs.model, input, values[props.formInputs.model][input.name], setFieldValue, errors, touched);\n    });\n  }; //Maps form inputs\n\n\n  var NestedInputs = function NestedInputs(model, values, setFieldValue, errors, touched) {\n    return model.form && model.form.map(function (input) {\n      return RenderInput(model.model, input, values[model.model][input.name], setFieldValue, errors, touched);\n    });\n  }; //Tabbed Form Render\n\n\n  var RenderTabForm = function RenderTabForm(values, setFieldValue, errors, touched) {\n    return React.createElement(Tabs, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, props.multiFormInputs.map(function (model, index) {\n      return React.createElement(Tab, {\n        key: index,\n        eventKey: index,\n        title: model.label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }), NestedInputs(model, values, setFieldValue, errors, touched));\n    }));\n  }; //Nested Model Forms Render\n\n\n  var RenderNestedForm = function RenderNestedForm(values, setFieldValue, errors, touched) {\n    return props.multiFormInputs.map(function (model, index) {\n      return React.createElement(Card, {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, model.label), NestedInputs(model, values, setFieldValue, errors, touched), React.createElement(\"h6\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }, \"Model: \".concat(model.model)));\n    });\n  };\n\n  if (!isNullOrUndefined(props.initialValues) && props.editMode || !props.editMode) {\n    return React.createElement(Formik, {\n      initialValues: initialValues,\n      className: props.className,\n      validate: function validate(values) {\n        return props.validate(values);\n      },\n      onSubmit: function onSubmit(values) {\n        props.handleSubmit(values);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, function (_ref) {\n      var values = _ref.values,\n          setFieldValue = _ref.setFieldValue,\n          errors = _ref.errors,\n          touched = _ref.touched;\n      return React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      }, props.tabbed ? RenderTabForm(values, setFieldValue, errors, touched) : props.nested ? RenderNestedForm(values, setFieldValue, errors, touched) : FormInputs(values, setFieldValue, errors, touched), React.createElement(ButtonToolbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      }, FormButtons));\n    });\n  } else {\n    return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, \"Loading . . .\");\n  }\n};\n\nexport default FormTemplate;","map":{"version":3,"sources":["D:\\react_training\\ReactJsOld\\src\\views\\components\\FormTemplate.js"],"names":["React","FormLabel","FormGroup","Button","ButtonToolbar","FormCheck","Tabs","Tab","Card","DatePicker","moment","Formik","Form","Field","FieldArray","isNullOrUndefined","DATE_FORMAT","FormTemplate","props","initialValues","tabbed","nested","multiFormInputs","map","tab","modelValues","form","input","type","name","default","model","formInputs","defaultClass","RenderInput","fieldValue","setFieldValue","errors","touched","modelField","modelTouch","isTouched","undefined","isError","displayError","label","event","target","files","inline","CustomError","radioInput","radio","index","value","toString","arrayHelpers","checkboxInput","checkbox","indexOf","checked","push","checkIndex","remove","dateValue","format","isValid","preventDefault","newValue","placeholder","selectInput","filter","option","item","i","component","maxLength","minLength","min","max","error","FormButtons","formButtons","button","submit","className","variant","size","onClick","FormInputs","values","NestedInputs","RenderTabForm","RenderNestedForm","editMode","validate","handleSubmit"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { FormLabel, FormGroup, Button, ButtonToolbar, FormCheck, Tabs, Tab, Card } from 'react-bootstrap';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport moment from 'moment';\r\nimport { Formik, Form, Field, FieldArray } from 'formik';\r\nimport { isNullOrUndefined } from '../../../node_modules/util';\r\nimport { DATE_FORMAT } from '../../utils/constants';\r\n\r\nlet FormTemplate = (props) => {\r\n\r\n    //Initial values\r\n    let initialValues = props.initialValues;\r\n\r\n    if (isNullOrUndefined(props.initialValues)) {\r\n        initialValues = {};\r\n        //Initial value if tabbed or single\r\n        if (isNullOrUndefined(props.initialValues)) {\r\n            if (props.tabbed || props.nested) {\r\n                props.multiFormInputs.map(tab => {\r\n                    let modelValues = {};\r\n                    tab.form.map(input => (\r\n                        input.type === \"datepicker\" ? modelValues[input.name] = moment()\r\n                            : modelValues[input.name] = input.default\r\n                    ));\r\n                    initialValues[tab.model] = modelValues;\r\n                    return initialValues[tab.model];\r\n                });\r\n            } else {\r\n                let modelValues = {};\r\n                props.formInputs.form.map(input => (\r\n                    input.type === \"datepicker\" ? modelValues[input.name] = moment()\r\n                        : modelValues[input.name] = input.default)\r\n                );\r\n                initialValues[props.formInputs.model] = modelValues;\r\n            }\r\n        }\r\n    }\r\n\r\n    let defaultClass = \"form-input\";\r\n\r\n    function RenderInput(model, input, fieldValue, setFieldValue, errors, touched) {\r\n        let modelField = `${model}.${input.name}`;\r\n        let modelTouch = touched[model];\r\n        let isTouched = undefined !== touched[model] && modelTouch[input.name];\r\n        let isError = undefined !== errors[modelField];\r\n        let displayError = isTouched && isError;\r\n\r\n        switch (input.type) {\r\n            //renders file upload\r\n            case \"file\": {\r\n                return (\r\n                    <FormGroup key={input.name} className={defaultClass}>\r\n                        <FormLabel >{input.label}</FormLabel>\r\n                        <br />\r\n                        <input name={modelField} type=\"file\" onChange={(event) => {\r\n                            setFieldValue(modelField, event.target.files[0]);\r\n                        }} />\r\n                    </FormGroup>\r\n                );\r\n            }\r\n\r\n            //renders radio button group field\r\n            case \"radio\": {\r\n                return (\r\n                    <FormGroup key={input.name} className={defaultClass}>\r\n                        <FormLabel >{input.label}</FormLabel >\r\n                        {input.inline && <br />}\r\n                        {CustomError(errors[modelField], displayError)}\r\n\r\n                        {props.radioInput.map((radio, index) => {\r\n                            if (radio.name === input.name) {\r\n                                return (\r\n                                    <FormCheck\r\n                                        id={input.name + index}\r\n                                        type=\"radio\"\r\n                                        inline={input.inline}\r\n                                        key={index}\r\n                                        value={radio.value}\r\n                                        name={modelField}\r\n                                        onChange={event => setFieldValue(modelField, event.target.value)}\r\n                                        checked={fieldValue.toString() === radio.value.toString()}\r\n                                        label={radio.label}\r\n                                    />\r\n                                );\r\n                            }\r\n\r\n                            return null;\r\n                        })}\r\n                    </FormGroup>\r\n                )\r\n            }\r\n\r\n\r\n            //renders single checkbox field\r\n            case \"checkbox\": {\r\n                return (\r\n                    <FormGroup key={input.name} className={defaultClass}>\r\n                        <FormLabel >{input.label}</FormLabel >\r\n                        {CustomError(errors[modelField], displayError)}\r\n\r\n                        <FormCheck\r\n                            id={input.name + input.value}\r\n                            type=\"checkbox\"\r\n                            value={input.value}\r\n                            name={modelField}\r\n                            onChange={() => setFieldValue(modelField, !fieldValue)}\r\n                            checked={fieldValue}\r\n                            label={input.label}\r\n                        />\r\n                    </FormGroup>\r\n                )\r\n            }\r\n\r\n            //renders multiple checkbox field\r\n            case \"multi-checkbox\": {\r\n                return (\r\n                    <FormGroup key={input.name} className={defaultClass}>\r\n                        <FormLabel >{input.label}</FormLabel >\r\n                        {CustomError(errors[modelField], displayError)}\r\n\r\n                        <FieldArray\r\n                            name={modelField}\r\n                            render={arrayHelpers => (\r\n                                <div>\r\n                                    {props.checkboxInput.map((checkbox, index) => {\r\n                                        if (input.name === checkbox.name) {\r\n                                            return (\r\n                                                <FormCheck\r\n                                                    id={input.name + index}\r\n                                                    type=\"checkbox\"\r\n                                                    key={index}\r\n                                                    name={modelField}\r\n                                                    value={checkbox.value}\r\n                                                    inline={input.inline}\r\n                                                    checked={0 <= fieldValue.indexOf(checkbox.value)}\r\n                                                    onChange={event => {\r\n                                                        if (event.target.checked) {\r\n                                                            arrayHelpers.push(checkbox.value)\r\n                                                        } else {\r\n                                                            let checkIndex = fieldValue.indexOf(checkbox.value);\r\n                                                            arrayHelpers.remove(checkIndex);\r\n                                                        }\r\n                                                    }}\r\n                                                    label={checkbox.label}\r\n                                                />\r\n                                            )\r\n                                        }\r\n\r\n                                        return null;\r\n                                    })}\r\n                                </div>\r\n                            )}\r\n                        />\r\n                    </FormGroup>\r\n                )\r\n            }\r\n\r\n            //renders datepicker field\r\n            case \"datepicker\": {\r\n                let dateValue = moment(fieldValue, input.format).isValid() ? moment(fieldValue, input.format) : null;\r\n\r\n                return (\r\n                    <FormGroup key={input.name} className={defaultClass}>\r\n                        <FormLabel >{input.label}</FormLabel >\r\n                        {CustomError(errors[modelField], displayError)}\r\n\r\n                        <DatePicker\r\n                            className={displayError ? \"form-error\" : \"\"}\r\n                            name={modelField}\r\n                            selected={dateValue}\r\n                            onChangeRaw={(event) => event.preventDefault()}\r\n                            onChange={newValue => setFieldValue(modelField, moment(newValue).format(DATE_FORMAT))}\r\n                            placeholderText={input.placeholder}\r\n                        />\r\n                    </FormGroup>\r\n                );\r\n            }\r\n\r\n            // renders select field\r\n            case \"select\": {\r\n                return (\r\n                    <FormGroup key={input.name} className={defaultClass}>\r\n                        <FormLabel >{input.label}</FormLabel >\r\n                        {CustomError(errors[modelField], displayError)}\r\n\r\n                        <Field\r\n                            className={displayError ? \"form-control form-error\" : \"form-control\"}\r\n                            component=\"select\"\r\n                            name={modelField}\r\n                        >\r\n                            <option disabled value=\"\">{input.placeholder}</option>\r\n                            {props.selectInput && props.selectInput.filter((option) => option.name === input.name).map((item, i) => {\r\n                                return (\r\n                                    <option key={i} value={item.value}> {item.label} </option>\r\n                                );\r\n                            })}\r\n                        </Field>\r\n                    </FormGroup>\r\n                );\r\n            }\r\n\r\n            //renders text, textarea, email, password, numbers, default input\r\n            default: {\r\n                return (\r\n                    <FormGroup key={modelField} className={defaultClass}>\r\n                        <FormLabel >{input.label}</FormLabel >\r\n                        {CustomError(errors[modelField], displayError)}\r\n\r\n                        <Field\r\n                            className={displayError ? \"form-control form-error\" : \"form-control\"}\r\n                            placeholder={input.placeholder}\r\n                            component={input.component}\r\n                            type={input.type}\r\n                            name={modelField}\r\n                            maxLength={input.maxLength}\r\n                            minLength={input.minLength}\r\n                            min={input.min}\r\n                            max={input.max}\r\n                            onChange={event => setFieldValue(modelField, event.target.value)}\r\n                        />\r\n                    </FormGroup>\r\n                );\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    //Error messages\r\n    const CustomError = (error, displayError) => {\r\n        return displayError ? <p className=\"formik-error\">{error}</p> : null;\r\n    }\r\n\r\n    //Renders form buttons\r\n    const FormButtons = props.formButtons && props.formButtons.map((button, i) => {\r\n        return (\r\n            <Button type={button.submit ? \"submit\" : \"button\"} key={i} className={button.className} variant={button.variant} size={button.size} onClick={button.onClick}>\r\n                {button.label}\r\n            </Button>\r\n        );\r\n    });\r\n\r\n    //Maps form inputs\r\n    const FormInputs = (values, setFieldValue, errors, touched) => props.formInputs.form && props.formInputs.form.map((input) => {\r\n        return RenderInput(props.formInputs.model, input, values[props.formInputs.model][input.name], setFieldValue, errors, touched)\r\n    });\r\n\r\n    //Maps form inputs\r\n    const NestedInputs = (model, values, setFieldValue, errors, touched) => model.form && model.form.map((input) => {\r\n        return RenderInput(model.model, input, values[model.model][input.name], setFieldValue, errors, touched)\r\n    });\r\n\r\n    //Tabbed Form Render\r\n    const RenderTabForm = (values, setFieldValue, errors, touched) => {\r\n        return (\r\n            <Tabs>\r\n                {props.multiFormInputs.map((model, index) => {\r\n                    return (\r\n                        <Tab key={index} eventKey={index} title={model.label}>\r\n                            <br />\r\n                            {NestedInputs(model, values, setFieldValue, errors, touched)}\r\n                        </Tab>\r\n\r\n                    )\r\n                })\r\n                }\r\n            </Tabs>\r\n        );\r\n    }\r\n\r\n    //Nested Model Forms Render\r\n    const RenderNestedForm = (values, setFieldValue, errors, touched) => {\r\n        return (\r\n            props.multiFormInputs.map((model, index) => {\r\n                return (\r\n                    <Card key={index}>\r\n                        <h4>{model.label}</h4>\r\n                        {NestedInputs(model, values, setFieldValue, errors, touched)}\r\n                        <h6>{`Model: ${model.model}`}</h6>\r\n                    </Card>);\r\n            })\r\n        );\r\n    }\r\n\r\n    \r\n    if ((!isNullOrUndefined(props.initialValues) && props.editMode) || !props.editMode) {\r\n        return (\r\n            <Formik\r\n                initialValues={initialValues}\r\n                className={props.className}\r\n                validate={values => {\r\n                    return props.validate(values);\r\n                }}\r\n                onSubmit={(values) => {\r\n                    props.handleSubmit(values)\r\n                }}\r\n            >\r\n                {({ values, setFieldValue, errors, touched }) => (\r\n                    <Form>\r\n                        {props.tabbed ? RenderTabForm(values, setFieldValue, errors, touched) :\r\n                            props.nested ? RenderNestedForm(values, setFieldValue, errors, touched) :\r\n                                FormInputs(values, setFieldValue, errors, touched)}\r\n                        <ButtonToolbar>\r\n                            {FormButtons}\r\n                        </ButtonToolbar>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        );\r\n    }else{\r\n        return <p>Loading . . .</p>;\r\n    }\r\n}\r\n\r\nexport default FormTemplate;"]},"metadata":{},"sourceType":"module"}