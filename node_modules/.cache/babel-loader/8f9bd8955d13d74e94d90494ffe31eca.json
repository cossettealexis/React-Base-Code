{"ast":null,"code":"import { isNullOrUndefined } from \"util\";\nimport moment from 'moment'; //'Basic' model validation\n\nvar validateForm = function validateForm(values) {\n  var errors = {};\n\n  if (!values.Basic.inputTwo) {\n    errors[\"Basic.inputTwo\"] = \"* This field should not be empty.\";\n  }\n\n  if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.Basic.inputEmail)) {\n    errors[\"Basic.inputEmail\"] = '* Invalid email address';\n  }\n\n  if ('' === values.Basic.inputSelect) {\n    errors[\"Basic.inputSelect\"] = \"* Please select one.\";\n  }\n\n  if (0 >= values.Basic.multiCheckbox.length) {\n    errors[\"Basic.multiCheckbox\"] = \"* Please check at least one.\";\n  }\n\n  if (0 >= values.Basic.multiInlineCheckbox.length) {\n    errors[\"Basic.multiInlineCheckbox\"] = \"* Please check at least one.\";\n  }\n\n  if (!values.Basic.singleCheckbox) {\n    errors[\"Basic.singleCheckbox\"] = \"* This field should be checked.\";\n  }\n\n  if (isNullOrUndefined(values.Basic.radioInput) || '' === values.Basic.radioInput) {\n    errors[\"Basic.radioInput\"] = \"* Please select one.\";\n  }\n\n  if (isNullOrUndefined(values.Basic.radioInlineInput) || '' === values.Basic.radioInlineInput) {\n    errors[\"Basic.radioInlineInput\"] = \"* Please select one.\";\n  }\n\n  if (!moment(values.Basic.inputDate).isValid()) {\n    errors[\"Basic.inputDate\"] = \"* Please enter a valid date.\";\n  }\n\n  if (values.Basic.numberInput > 10 || values.Basic.numberInput < 0) {\n    errors[\"Basic.numberInput\"] = \"* Value should be between 0 to 10.\";\n  }\n\n  if (!values.Basic.textAreaInput) {\n    errors[\"Basic.textAreaInput\"] = \"* This field should not be empty.\";\n  }\n\n  return errors;\n}; //Multiple Form model validation\n\n\nvar validateMultiForm = function validateMultiForm(values) {\n  var errors = {}; //ModelOne Validations\n\n  if (!values.ModelOne.tabOneInput1) {\n    errors[\"ModelOne.tabOneInput1\"] = \"* Field #1 validation message.\";\n  }\n\n  if (!values.ModelOne.tabOneInput2) {\n    errors[\"ModelOne.tabOneInput2\"] = \"* Field #2 validation message.\";\n  } //ModelTwo Validations\n\n\n  if (!values.ModelTwo.tabTwoInput1) {\n    errors[\"ModelTwo.tabTwoInput1\"] = \"* Field #3 validation message.\";\n  }\n\n  if (!values.ModelTwo.tabTwoInput2) {\n    errors[\"ModelTwo.tabTwoInput2\"] = \"* Field #4 validation message.\";\n  } //ModelThree\n\n\n  if ('' === values.ModelThree.inputSelect) {\n    errors[\"ModelThree.inputSelect\"] = \"* Please select one.\";\n  }\n\n  return errors;\n};\n\nexport { validateForm, validateMultiForm };","map":{"version":3,"sources":["D:\\react_training\\ReactJsOld\\src\\views\\containers\\Demo\\state\\selectors.js"],"names":["isNullOrUndefined","moment","validateForm","values","errors","Basic","inputTwo","test","inputEmail","inputSelect","multiCheckbox","length","multiInlineCheckbox","singleCheckbox","radioInput","radioInlineInput","inputDate","isValid","numberInput","textAreaInput","validateMultiForm","ModelOne","tabOneInput1","tabOneInput2","ModelTwo","tabTwoInput1","tabTwoInput2","ModelThree"],"mappings":"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","sourcesContent":["import { isNullOrUndefined } from \"util\";\r\nimport moment from 'moment';\r\n\r\n//'Basic' model validation\r\nconst validateForm = (values) => {\r\n    let errors = {};\r\n\r\n    if (!values.Basic.inputTwo) {\r\n        errors[`Basic.inputTwo`] = \"* This field should not be empty.\"\r\n    }\r\n    \r\n\r\n    if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.Basic.inputEmail)) {\r\n        errors[`Basic.inputEmail`]= '* Invalid email address';\r\n    }\r\n\r\n    if ('' === values.Basic.inputSelect) {\r\n        errors[`Basic.inputSelect`] = \"* Please select one.\"\r\n    }\r\n    \r\n    if (0 >= values.Basic.multiCheckbox.length) {\r\n        errors[`Basic.multiCheckbox`] = \"* Please check at least one.\"\r\n    }\r\n\r\n    if (0 >= values.Basic.multiInlineCheckbox.length) {\r\n        errors[`Basic.multiInlineCheckbox`] = \"* Please check at least one.\"\r\n    }\r\n\r\n    if (!values.Basic.singleCheckbox) {\r\n        errors[`Basic.singleCheckbox`] = \"* This field should be checked.\"\r\n    }\r\n\r\n    if (isNullOrUndefined(values.Basic.radioInput) || '' === values.Basic.radioInput) {\r\n        errors[`Basic.radioInput`] = \"* Please select one.\"\r\n    }\r\n\r\n    if (isNullOrUndefined(values.Basic.radioInlineInput) || '' === values.Basic.radioInlineInput) {\r\n        errors[`Basic.radioInlineInput`] = \"* Please select one.\"\r\n    }\r\n\r\n    if (!moment(values.Basic.inputDate).isValid()) {\r\n        errors[`Basic.inputDate`] = \"* Please enter a valid date.\"\r\n    }\r\n\r\n    if (values.Basic.numberInput > 10 || values.Basic.numberInput < 0) {\r\n        errors[`Basic.numberInput`] = \"* Value should be between 0 to 10.\";\r\n    }\r\n\r\n    if (!values.Basic.textAreaInput) {\r\n        errors[`Basic.textAreaInput`] = \"* This field should not be empty.\"\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\n//Multiple Form model validation\r\nconst validateMultiForm = (values) =>{\r\n    let errors = {};\r\n\r\n    //ModelOne Validations\r\n    if (!values.ModelOne.tabOneInput1) {\r\n        errors[`ModelOne.tabOneInput1`] = \"* Field #1 validation message.\"\r\n    }\r\n\r\n    if (!values.ModelOne.tabOneInput2) {\r\n        errors[`ModelOne.tabOneInput2`] = \"* Field #2 validation message.\"\r\n    }\r\n\r\n    //ModelTwo Validations\r\n    if (!values.ModelTwo.tabTwoInput1) {\r\n        errors[`ModelTwo.tabTwoInput1`] = \"* Field #3 validation message.\"\r\n    }\r\n\r\n    if (!values.ModelTwo.tabTwoInput2) {\r\n        errors[`ModelTwo.tabTwoInput2`] = \"* Field #4 validation message.\"\r\n    }\r\n\r\n    //ModelThree\r\n    if ('' === values.ModelThree.inputSelect) {\r\n        errors[`ModelThree.inputSelect`] = \"* Please select one.\"\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\nexport {\r\n    validateForm,\r\n    validateMultiForm\r\n}"]},"metadata":{},"sourceType":"module"}